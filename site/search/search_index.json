{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What This is a wiki dedicated to help people run services such as file servers, NAS, backup servers, seedboxes etc on their own hardware and local network. Why While the above services are available easily and for free (or for a small monthly subscription) by companies such as Google, Apple, Dropbox etc., there are issues such as privacy, non-availability due to loss of internet connection, and government censorship. Companies can terminate accounts for undisclosed reasons, accounts can get hacked, trade wars can prohibit companies from providing their services to other countries, and internet lines can go out due to accidents or natural disasters. Even for people who are not concerned about the above issues, self hosting can be a fun exercise in DIY, an extra backup plan in addition to cloud services, or salvaging older, unused hardware such as obsolete smartphones, abandoned Raspberry Pis, and laptops with low-res or broken screens/batteries. Such devices can often make perfectly usable, low-powered servers instead of rotting away in a basement, or worse, in a landfill. For whom The intended audience is people who are not afraid to dive into the command line, but also do not have the time or mental space to look up tutorials that might be obsolete, scattered across the web, or for a different distribution than they run. The guides are aimed to be as much \"copy and paste commands as-is\" as possible while not compromising on security. How This wiki will primarily focus on two platforms: the latest version of Debian GNU/Linux (the instructions for which will usually run unmodified on Ubuntu LTS, and will be noted where they don't), and Windows Subsystem for Linux (WSL). The reason for the latter (certainly controversial) choice is to enable people who have a working Windows 10 system to be able to run software like NextCloud or Syncthing without having to commit a different machine, hard disk or switching over completely to Linux. Topics to be covered Here is a tentative list of topics that will be covered at first. The list wil grow bigger in scope as time goes on: Simple File Server Using SMB and NGINX [RPi/Debian/WSL] Automated, Distributed Local Backups Using Syncthing and Rsync [RPi/Debian/Windows/Android] Simple Torrent Box Using Transmission-daemon [RPi/Debian/Ubuntu] Mobile Torrent Box Using LibreTorrent [Android] ...more to come","title":"Welcome to the Self-host Wiki"},{"location":"#what","text":"This is a wiki dedicated to help people run services such as file servers, NAS, backup servers, seedboxes etc on their own hardware and local network.","title":"What"},{"location":"#why","text":"While the above services are available easily and for free (or for a small monthly subscription) by companies such as Google, Apple, Dropbox etc., there are issues such as privacy, non-availability due to loss of internet connection, and government censorship. Companies can terminate accounts for undisclosed reasons, accounts can get hacked, trade wars can prohibit companies from providing their services to other countries, and internet lines can go out due to accidents or natural disasters. Even for people who are not concerned about the above issues, self hosting can be a fun exercise in DIY, an extra backup plan in addition to cloud services, or salvaging older, unused hardware such as obsolete smartphones, abandoned Raspberry Pis, and laptops with low-res or broken screens/batteries. Such devices can often make perfectly usable, low-powered servers instead of rotting away in a basement, or worse, in a landfill.","title":"Why"},{"location":"#for-whom","text":"The intended audience is people who are not afraid to dive into the command line, but also do not have the time or mental space to look up tutorials that might be obsolete, scattered across the web, or for a different distribution than they run. The guides are aimed to be as much \"copy and paste commands as-is\" as possible while not compromising on security.","title":"For whom"},{"location":"#how","text":"This wiki will primarily focus on two platforms: the latest version of Debian GNU/Linux (the instructions for which will usually run unmodified on Ubuntu LTS, and will be noted where they don't), and Windows Subsystem for Linux (WSL). The reason for the latter (certainly controversial) choice is to enable people who have a working Windows 10 system to be able to run software like NextCloud or Syncthing without having to commit a different machine, hard disk or switching over completely to Linux.","title":"How"},{"location":"#topics-to-be-covered","text":"Here is a tentative list of topics that will be covered at first. The list wil grow bigger in scope as time goes on: Simple File Server Using SMB and NGINX [RPi/Debian/WSL] Automated, Distributed Local Backups Using Syncthing and Rsync [RPi/Debian/Windows/Android] Simple Torrent Box Using Transmission-daemon [RPi/Debian/Ubuntu] Mobile Torrent Box Using LibreTorrent [Android] ...more to come","title":"Topics to be covered"},{"location":"guides/fileserver/","text":"We will create a simple file server on a GNU/Linux installation. The aim is to have a bare-bones server that provides read-write access using the SMB protocol (the technology that Microsoft uses for its network shares) and (optionally) read-only access over HTTP, so that any device on the network can fetch files or stream media while only needing a web browser. Table of Contents Prerequisites Samba Creating the Media folder Installation Configuration Creating a Samba user Applying Changes and Enabling the SMBD Service Accessing the Server Finding Out the Server Address Using Windows Using macOS Optional: Enabling Web/http Access Using NGINX Installation and Configuration Serving the \"/share\" Directory Optional: Making Things Prettier Prerequisites A computer running Debian or a derivative distribution such as Ubuntu or Raspbian (Raspberry Pi). A way to connect said computer to the local network (WiFi/Ethernet). Ample disk space to store your files. Samba We will use Samba to provide file-sharing services to our devices. Before installing it, we will set up our folders. Creating the Media folder First, create a new folder to serve as your media directory: sudo mkdir /share sudo chown username:username /share In the second command, replace username with the username you want to use on your system. If your username is mark , use mark:mark . On Raspbian, you will probably want to use pi:pi . Installation To begin, update your Apt repositories: sudo apt update Then, install Samba using: sudo apt install samba samba-common-bin Configuration Once installed, configure Samba to serve your files. To do this, edit Samba's configuration file using your preferred editor: sudo nano /etc/samba/smb.conf Add the following to this file: [share] path = /share writeable=Yes public=no create mask=0777 directory mask=0777 Here, [share] refers to the name of the Samba share you created. This share will be accessible from other machines on the address \\\\HOSTNAME\\share , where HOSTNAME is the actual hostname of your server. path defines the location of the shared directory on the filesystem. Here, it refers to the directory you created earlier. writable decides whether the folder is modifiable when accessed using Samba. public is set to no , which means that a username and password will be required to access the share. If you wish to enable anonymous, passwordless login, change it to yes . Save the file. You are now ready to create a username and password for accessing the share. Note that if you set up a public share using public=yes in this step, you can skip the following section. Creating a Samba user To create a username and password for accessing your share, use the smbpasswd command. Replace username with the name that you wish to use: sudo smbpasswd -a username After pressing Enter , you will be prompted to set a password for this user. Applying Changes and Enabling the SMBD Service To apply your changes, first restart the smbd (Samba) service: sudo systemctl restart smbd To make the service start up every time at boot, you need to enable it: sudo systemctl enable smbd Accessing the Server To access the server using Samba, you need either the server's local IP address, or the hostname. If you know what those are for your server, you can jump to the Using Windows or Using macOS sections. Finding Out the Server Address Most modern routers let you access a device on the network using the scheme hostname.local , where \"hostname\" is to be replaced by your server's actual hostname. Usually, all you need to do to find that out is to run the hostname command on the server: hostname In my case, the output is \"raspberrypi\", since I'm using a Raspberry Pi as the test device. I can ideally access my share using the address raspberrypi.local . If the above method does not work on your network, you will need the local IP address of your server. Again, use the hostname command, but with the -I flag, like so: hostname -I You will get an address like 192.168.1.15 or 10.0.0.6 . Note it down. Using Windows Open up Windows Explorer. In the address bar, type in \\\\hostname.local\\share , replacing \"hostname\" with your server's hostname (or \\\\IP address\\share if that does not work). You will be prompted to enter a username and password to access the share. Use the credentials you set when creating the Samba user in the Creating a Samba user section. Using macOS Open Finder. In the toolbar on the top, select Go->Connect to Server... . In the address bar, type in smb://hostname.local/share , replacing \"hostname\" with your server's hostname (or smb://IP address/share if that does not work). You will be prompted to enter a username and password to access the share. Use the credentials you set when creating the Samba user in the Creating a Samba user section. You can choose to save the credentials and add this folder to your Favorites for easier access in the future. You are now all set to use your new file/media server as you please. Of course, you can also access your server using your Android devices (look for a file manager that supports the SMB/Samba protocol). iOS devices can also access it using the built-in Files app. That is it for the file server guide if all you need is SMB access. If you would prefer to access your server using a web browser, keep reading. Optional: Enabling Web/http Access Using NGINX To enable web access, you will need a web server. In this guide, we will use NGINX because it is relatively lightweight and simple to configure. Installation and Configuration To install NGINX, run: sudo apt install nginx-full To configure the server, first make sure that NGINX's \"Fancy indexes\" setting is enabled: file /etc/nginx/modules-enabled/50-mod-http-fancyindex.conf If you get an output like cannot open ...50-mod-http-fancyindex.conf (No such file or directory) , enable the fancy indexes module by running: sudo ln -s /usr/share/nginx/modules-available/mod-http-fancyindex.conf /etc/nginx/modules-enabled/50-mod-http-fancyindex.conf Serving the \"/share\" Directory The config file for the default NGINX vhost is /etc/nginx/sites-enabled/default , which in turn is a symlink to /etc/nginx/sites-available/default . sudo nano /etc/nginx/sites-available/default For our setup, replace its contents with the following: server { # The default port to listen on listen 80 default_server; listen [::]:80 default_server; # Change root directory to our file server's root root /share; index index.html index.htm; server_name _; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; #Fancy index settings: fancyindex on; # Enable fancy indexes. fancyindex_name_length 255; # Maximum length of a filename fancyindex_localtime on; fancyindex_exact_size off; # Output human-readable file sizes. } } Modify the root parameter according to your requirements if you chose a different directory for your file server. Now, start and enable the NGINX service: sudo systemctl restart nginx sudo systemctl enable nginx If everything went well, you can now access your server with any web browser at http://hostname.local - replacing \"hostname\" with your server's actual hostname or local IP address. Optional: Making Things Prettier If the above image looks rather... dull to you, that's because it is (it would've looked worse had we not enabled Fancy indexes). Fortunately, there are plenty of themes available for a prettier, more usable directory listing. For this guide, we will use one called Flat theme . Download the theme to your home directory using: cd ~ wget https://github.com/alehaa/nginx-fancyindex-flat-theme/releases/download/v1.0/nginx-fancyindex-flat-theme.tar.gz Once the download is complete, unpack the tar archive: tar xvf ./nginx-fancyindex-flat-theme.tar.gz You will now have a directory called flat-theme in your home folder. Move this to your server's root: mv ./flat-theme /share/theme Next, modify the /etc/nginx/sites-available/default file: sudo nano /etc/nginx/sites-available/default Scroll down to the location / { section in the file, and change it to this: location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; #Fancy index settings fancyindex on; # Enable fancy indexes. fancyindex_name_length 255; fancyindex_localtime on; fancyindex_exact_size off; # Output human-readable file sizes. # Settings for the theme: fancyindex_header \"/theme/header.html\"; fancyindex_footer \"/theme/footer.html\"; fancyindex_show_path off; # Make sure the \"theme\" folder is not displayed: fancyindex_ignore \"theme\"; } Finally, save the file and reload NGINX settings: sudo systemctl reload nginx Refresh the page on your browser, and you will see a much better looking, more usable file index:","title":"Simple File / Media Server Using SMB and NGINX"},{"location":"guides/fileserver/#prerequisites","text":"A computer running Debian or a derivative distribution such as Ubuntu or Raspbian (Raspberry Pi). A way to connect said computer to the local network (WiFi/Ethernet). Ample disk space to store your files.","title":"Prerequisites"},{"location":"guides/fileserver/#samba","text":"We will use Samba to provide file-sharing services to our devices. Before installing it, we will set up our folders.","title":"Samba"},{"location":"guides/fileserver/#creating-the-media-folder","text":"First, create a new folder to serve as your media directory: sudo mkdir /share sudo chown username:username /share In the second command, replace username with the username you want to use on your system. If your username is mark , use mark:mark . On Raspbian, you will probably want to use pi:pi .","title":"Creating the Media folder"},{"location":"guides/fileserver/#installation","text":"To begin, update your Apt repositories: sudo apt update Then, install Samba using: sudo apt install samba samba-common-bin","title":"Installation"},{"location":"guides/fileserver/#configuration","text":"Once installed, configure Samba to serve your files. To do this, edit Samba's configuration file using your preferred editor: sudo nano /etc/samba/smb.conf Add the following to this file: [share] path = /share writeable=Yes public=no create mask=0777 directory mask=0777 Here, [share] refers to the name of the Samba share you created. This share will be accessible from other machines on the address \\\\HOSTNAME\\share , where HOSTNAME is the actual hostname of your server. path defines the location of the shared directory on the filesystem. Here, it refers to the directory you created earlier. writable decides whether the folder is modifiable when accessed using Samba. public is set to no , which means that a username and password will be required to access the share. If you wish to enable anonymous, passwordless login, change it to yes . Save the file. You are now ready to create a username and password for accessing the share. Note that if you set up a public share using public=yes in this step, you can skip the following section.","title":"Configuration"},{"location":"guides/fileserver/#creating-a-samba-user","text":"To create a username and password for accessing your share, use the smbpasswd command. Replace username with the name that you wish to use: sudo smbpasswd -a username After pressing Enter , you will be prompted to set a password for this user.","title":"Creating a Samba user"},{"location":"guides/fileserver/#applying-changes-and-enabling-the-smbd-service","text":"To apply your changes, first restart the smbd (Samba) service: sudo systemctl restart smbd To make the service start up every time at boot, you need to enable it: sudo systemctl enable smbd","title":"Applying Changes and Enabling the SMBD Service"},{"location":"guides/fileserver/#accessing-the-server","text":"To access the server using Samba, you need either the server's local IP address, or the hostname. If you know what those are for your server, you can jump to the Using Windows or Using macOS sections.","title":"Accessing the Server"},{"location":"guides/fileserver/#finding-out-the-server-address","text":"Most modern routers let you access a device on the network using the scheme hostname.local , where \"hostname\" is to be replaced by your server's actual hostname. Usually, all you need to do to find that out is to run the hostname command on the server: hostname In my case, the output is \"raspberrypi\", since I'm using a Raspberry Pi as the test device. I can ideally access my share using the address raspberrypi.local . If the above method does not work on your network, you will need the local IP address of your server. Again, use the hostname command, but with the -I flag, like so: hostname -I You will get an address like 192.168.1.15 or 10.0.0.6 . Note it down.","title":"Finding Out the Server Address"},{"location":"guides/fileserver/#using-windows","text":"Open up Windows Explorer. In the address bar, type in \\\\hostname.local\\share , replacing \"hostname\" with your server's hostname (or \\\\IP address\\share if that does not work). You will be prompted to enter a username and password to access the share. Use the credentials you set when creating the Samba user in the Creating a Samba user section.","title":"Using Windows"},{"location":"guides/fileserver/#using-macos","text":"Open Finder. In the toolbar on the top, select Go->Connect to Server... . In the address bar, type in smb://hostname.local/share , replacing \"hostname\" with your server's hostname (or smb://IP address/share if that does not work). You will be prompted to enter a username and password to access the share. Use the credentials you set when creating the Samba user in the Creating a Samba user section. You can choose to save the credentials and add this folder to your Favorites for easier access in the future. You are now all set to use your new file/media server as you please. Of course, you can also access your server using your Android devices (look for a file manager that supports the SMB/Samba protocol). iOS devices can also access it using the built-in Files app. That is it for the file server guide if all you need is SMB access. If you would prefer to access your server using a web browser, keep reading.","title":"Using macOS"},{"location":"guides/fileserver/#optional-enabling-webhttp-access-using-nginx","text":"To enable web access, you will need a web server. In this guide, we will use NGINX because it is relatively lightweight and simple to configure.","title":"Optional: Enabling Web/http Access Using NGINX"},{"location":"guides/fileserver/#installation-and-configuration","text":"To install NGINX, run: sudo apt install nginx-full To configure the server, first make sure that NGINX's \"Fancy indexes\" setting is enabled: file /etc/nginx/modules-enabled/50-mod-http-fancyindex.conf If you get an output like cannot open ...50-mod-http-fancyindex.conf (No such file or directory) , enable the fancy indexes module by running: sudo ln -s /usr/share/nginx/modules-available/mod-http-fancyindex.conf /etc/nginx/modules-enabled/50-mod-http-fancyindex.conf","title":"Installation and Configuration"},{"location":"guides/fileserver/#serving-the-share-directory","text":"The config file for the default NGINX vhost is /etc/nginx/sites-enabled/default , which in turn is a symlink to /etc/nginx/sites-available/default . sudo nano /etc/nginx/sites-available/default For our setup, replace its contents with the following: server { # The default port to listen on listen 80 default_server; listen [::]:80 default_server; # Change root directory to our file server's root root /share; index index.html index.htm; server_name _; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; #Fancy index settings: fancyindex on; # Enable fancy indexes. fancyindex_name_length 255; # Maximum length of a filename fancyindex_localtime on; fancyindex_exact_size off; # Output human-readable file sizes. } } Modify the root parameter according to your requirements if you chose a different directory for your file server. Now, start and enable the NGINX service: sudo systemctl restart nginx sudo systemctl enable nginx If everything went well, you can now access your server with any web browser at http://hostname.local - replacing \"hostname\" with your server's actual hostname or local IP address.","title":"Serving the \"/share\" Directory"},{"location":"guides/fileserver/#optional-making-things-prettier","text":"If the above image looks rather... dull to you, that's because it is (it would've looked worse had we not enabled Fancy indexes). Fortunately, there are plenty of themes available for a prettier, more usable directory listing. For this guide, we will use one called Flat theme . Download the theme to your home directory using: cd ~ wget https://github.com/alehaa/nginx-fancyindex-flat-theme/releases/download/v1.0/nginx-fancyindex-flat-theme.tar.gz Once the download is complete, unpack the tar archive: tar xvf ./nginx-fancyindex-flat-theme.tar.gz You will now have a directory called flat-theme in your home folder. Move this to your server's root: mv ./flat-theme /share/theme Next, modify the /etc/nginx/sites-available/default file: sudo nano /etc/nginx/sites-available/default Scroll down to the location / { section in the file, and change it to this: location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; #Fancy index settings fancyindex on; # Enable fancy indexes. fancyindex_name_length 255; fancyindex_localtime on; fancyindex_exact_size off; # Output human-readable file sizes. # Settings for the theme: fancyindex_header \"/theme/header.html\"; fancyindex_footer \"/theme/footer.html\"; fancyindex_show_path off; # Make sure the \"theme\" folder is not displayed: fancyindex_ignore \"theme\"; } Finally, save the file and reload NGINX settings: sudo systemctl reload nginx Refresh the page on your browser, and you will see a much better looking, more usable file index:","title":"Optional: Making Things Prettier"},{"location":"guides/readme/","text":"The Git repo for the Self-host Wiki (formerly selfhostwiki.neocities.org) This wiki is written in MultiMarkdown and converted to HTML using Pandoc. Example usage: # Convert a single file: pandoc -c ./style.css -B ./navbar.html -f markdown_mmd -t html ./index.md -o ./selfhostwiki_html/index.html OR Convert the entire folder using the conversion script : ./convert_pandoc.sh","title":"The Git repo for the [Self-host Wiki](https://escargot.tech/selfhost/) (formerly selfhostwiki.neocities.org)"},{"location":"guides/readme/#the-git-repo-for-the-self-host-wiki-formerly-selfhostwikineocitiesorg","text":"This wiki is written in MultiMarkdown and converted to HTML using Pandoc. Example usage: # Convert a single file: pandoc -c ./style.css -B ./navbar.html -f markdown_mmd -t html ./index.md -o ./selfhostwiki_html/index.html OR Convert the entire folder using the conversion script : ./convert_pandoc.sh","title":"The Git repo for the Self-host Wiki (formerly selfhostwiki.neocities.org)"},{"location":"guides/robocopy/","text":"Robocopy is a native Windows tool for syncing files and folders. This guide is aimed at (ex-) Linux/Mac users who want a native Windows solution to syncing/mirroring folders like Rsync. Keep in mind that Robocopy is not a feature-by-feature replacement for Rsync and does NOT natively support syncing over SSH . It does, however allow syncing with Network Shares (SMB/CIFS). Table of Contents: Basic folder syncing Mirroring Other useful options Resources Basic folder syncing To start, open a PowerShell window. Robocopy commands are structured like: robocopy <source> <destination> [<options>] To sync a folder in your Home directory to an external drive (H:) : robocopy ~\\Documents H:\\backups\\Documents /s This syncs the folder \"Documents\" in ~ , which is your user's home directory ( C:\\Users\\yourUsername by default) with H:\\backups\\Documents . The /s option tells Robocopy to copy s ubdirectories when available. This however does not sync empty directories. If you also want empty subdirectories to be synced, use /e : robocopy ~\\Documents H:\\backups\\Documents /e To copy all file information (time stamps, owner information etc), use the /copy:datso option ( D ata, A ttributes, T imestamps, S ecurity, O wner info): robocopy ~\\Documents H:\\backups\\Documents /copy:datso /e Mirroring To mirror a folder, use the /mir option. This will delete destination files and directories that do not exist in the source : robocopy ~\\Documents H:\\backups\\Documents /mir Other useful options /lev:<n> : Copies only the top n levels of the source directory tree. /xf <filename> : Excludes files that match the specified names or paths. Supports wildcard characters (* and ?). /xd <directory> : Same thing, but for directories. /xo : Excludes older files. Use if you do not want Robocopy to replace the files in destination if they are newer than the source. /max:<n> : Specifies the maximum file size. Excludes files bigger than n bytes. /min:<n> : Specifies the minimum file size. /maxage:<n> : Specifies the maximum file age. Excludes files older than n days or date. /minage:<n> : Specifies the minimum file age. Resources Microsoft Docs Page for Robocopy Wikipedia Article","title":"File Syncing and Backups on Windows With Robocopy"},{"location":"guides/robocopy/#basic-folder-syncing","text":"To start, open a PowerShell window. Robocopy commands are structured like: robocopy <source> <destination> [<options>] To sync a folder in your Home directory to an external drive (H:) : robocopy ~\\Documents H:\\backups\\Documents /s This syncs the folder \"Documents\" in ~ , which is your user's home directory ( C:\\Users\\yourUsername by default) with H:\\backups\\Documents . The /s option tells Robocopy to copy s ubdirectories when available. This however does not sync empty directories. If you also want empty subdirectories to be synced, use /e : robocopy ~\\Documents H:\\backups\\Documents /e To copy all file information (time stamps, owner information etc), use the /copy:datso option ( D ata, A ttributes, T imestamps, S ecurity, O wner info): robocopy ~\\Documents H:\\backups\\Documents /copy:datso /e","title":"Basic folder syncing"},{"location":"guides/robocopy/#mirroring","text":"To mirror a folder, use the /mir option. This will delete destination files and directories that do not exist in the source : robocopy ~\\Documents H:\\backups\\Documents /mir","title":"Mirroring"},{"location":"guides/robocopy/#other-useful-options","text":"/lev:<n> : Copies only the top n levels of the source directory tree. /xf <filename> : Excludes files that match the specified names or paths. Supports wildcard characters (* and ?). /xd <directory> : Same thing, but for directories. /xo : Excludes older files. Use if you do not want Robocopy to replace the files in destination if they are newer than the source. /max:<n> : Specifies the maximum file size. Excludes files bigger than n bytes. /min:<n> : Specifies the minimum file size. /maxage:<n> : Specifies the maximum file age. Excludes files older than n days or date. /minage:<n> : Specifies the minimum file age.","title":"Other useful options"},{"location":"guides/robocopy/#resources","text":"Microsoft Docs Page for Robocopy Wikipedia Article","title":"Resources"},{"location":"guides/sync_backup/","text":"In this guide, you will learn to use Syncthing for local, distributed file syncing across multiple devices, along with Rsync (for macOS, Linux) and Windows' native backup utility for regularly backing up your important data. The first goal is to have your important, frequently accessed data, such as music, camera photos etc. synced and available on all/most of your devices such as smartphones, laptops and desktops. The second goal is to keep this synced, distributed data regularly backed up to an external storage device such as a pen/thumb drive or an external hard disk. This is important because while you do have your data in multiple places simultaneously, Syncthing is not a backup solution . For example, if you are syncing your phone's \"Camera photos\" folder to your desktop, and some/all of the photos on the phone are accidentally deleted (or corrupted) while Syncthing is running on both the devices, it will notice the changes and happily delete the synced copies of those photos on your desktop as well. Therefore, backups are essential. Table of Contents Distributed File Sync with Syncthing Download and install Syncthing for your OS: Example Setup: Sharing a Music Folder Between an Android Phone and a Desktop/Laptop PC Sample Folder Structure Backups Backups on Windows Using the GUI Using the Command Line with Robocopy Simplifying the Process Backups on macOS and Linux with Rsync Pre-Setup Taking Backups Creating a Backup Script Further Reading Distributed File Sync with Syncthing Download and install Syncthing for your OS: Android (Google play) , or alternatively, F-Droid Windows macOS Linux / BSD - use the version provided by your distribution (possibly old/outdated), or see the Packages and Bundlings document on the Syncthing website. Install Syncthing on two or more of the devices that you want to sync folders on. Example Setup: Sharing a Music Folder Between an Android Phone and a Desktop/Laptop PC As a demonstration, you will learn to set up a folder called \"DesktopMusic\" in your user's Home directory on a desktop to sync with a folder called \"SyncedMusic\" on an Android device. Once you can set this up, adding more folders and/or devices will be relatively straightforward. On your desktop, create a folder called DesktopMusic in your user's Home directory. On your Android smartphone, using a file manager of your choice, create a folder called SyncedMusic . Run Syncthing on your desktop and open the Syncthing app on your smartphone. Make sure both the devices are connected to the same network. On your desktop, you will see a screen like the following: Click on the \" + Add Folder \" button on the left side of the screen. 1. In the dialog box that pops up, go to the \" Folder Path \" section and enter ~\\DesktopMusic if you are on Windows, or ~/DesktopMusic on Linux/macOS. The ~ character automatically translates to your current user's Home directory. Note for Linux/macOS users : Keep in mind that these systems are case-sensitive - document1.txt is NOT the same as Document1.txt. As in the screenshot, give this folder an appropriate \"Folder Label\" and click \"\u2705 Save \" On the bottom right of the main screen, you will see a button called \"**+Add Remote Device\". Click it. Make sure Syncthing is open on your smartphone. You will see a popup like the following: The highlighted link is the device ID of your smartphone. Click on it to add it. Optionally, give the device a name in the \" Device Name \" section. 1. In the same dialog box, click on the \" Sharing \" tab on the top and make sure the DesktopMusic folder that we created is selected. Click \"\u2705 Save \" once you are done. Soon, you will see a notification on your smartphone that says \"Device XYZ wants to connect\". Click on \" Accept \". After accepting, you will soon see another notification saying \"Device XYZ wants to share folder 'DesktopMusic'\". Click \" Accept \" again. You will see a screen similar to this: Tap on the part where it says \" Directory \", and navigate to the SyncedMusic folder that you created earlier in point 2 and select it. Once done, tap on the \u2705 tick button on the top right. If the DesktopMusic folder on your desktop has any files in it, they will sync with the smartphone. That is all you need to know for basic file syncing with Syncthing. You can follow the same procedure to add more devices and folders to your setup. Ideally, you will keep the Syncthing service running perpetually on your desktop and run it on your mobile devices as and when necessary (Syncthing can be a battery hog). For further reading and more advanced configurations, refer to the excellent Syncthing documentation . Of special interest are the concepts of Send-only folder (for devices where \"master copies\" are kept) and Receive-only folder . Sample Folder Structure In a sample household with one desktop, one smartphone and one laptop, you can try to use a structure like this on your desktop: HOME/ \u251c Music # Synced in Send-only mode with smartphone and laptop \u2514 MobileStuff # Parent folder for files synced from your smartphone \u251c CameraPhotos # Synced in Receive-only mode with smartphone \u251c WhatsAppMedia # Your phone's `/storage/Whatsapp/Media` folder, # contains images,videos etc. shared on WhatsApp. \u2514 Similarly, any other folders in your phone that you'd like to sync. The advantage of a structure like this is that once your desktop or laptop has finished syncing with your smartphone, it is very easy to make backups of everything important, which we will learn in the next section. Backups It is recommended to keep a copy of your important files on at least two external drives. One of them will be your daily backup drive - you insert it in your desktop or laptop once a day and make a backup. It will save your skin in case your computer's hard disk dies or if you accidentally delete your synced folders. The other drive is your weekly/monthly backup - you do the same thing as the first one on it once per week/month, and then store it in a different location than your first backup drive. This will save your skin in case your first backup drive either fails or your baby throws it across the room. Backups on Windows Using the GUI Backing up your personal files in Windows is relatively straightforward using the built-in Backup and Restore functionality. Insert your to-be backup drive in your computer, search for \" Backup Settings \" in the start menu, and use the GUI to configure which folders to back up, how often and to which drive. Do the same with your other backup drive, and you are done. Using the Command Line with Robocopy Another way to do backups on Windows if you need finer control of your backups and prefer using the command line is using the built-in Robocopy tool. While it is recommended to read the dedicated tutorial to get a good grasp of Robocopy, we will nevertheless see how to use it to back up your files to an external hard disk. For the purpose of this tutorial, we will assume you have a directory structure as mentioned in the Sample Folder Structure section above, and want to back up the Music and MobileStuff folders in your home directory. We are also assuming that your external drive is mounted as H:\\ . You will need to verify it on your system and change the drive letter accordingly. It is recommended to use a dedicated backup folder in your drive. In our case, we will use H:\\backups . Robocopy commands are structured like: robocopy <source> <destination> [<options>] To sync the MobileStuff folder, open a PowerShell window, and enter the following command: robocopy ~\\MobileStuff H:\\backups\\MobileStuff /s Here is an explanation of what is going on: ~ is shortcut for your user's Home directory - C:\\Users\\yourUsername by default. Therefore, ~\\MobileStuff automatically translates to C:\\Users\\yourUsername\\MobileStuff The /s option tells Robocopy to copy s ubdirectories when available. Similarly, we can do the same for Music or any other folder: robocopy ~\\Music H:\\backups\\Music /s Simplifying the Process If you have several folders that you wish to back up regularly, entering the above command for every folder will get tedious. To solve this problem, you can write a PowerShell function . Open a new PowerShell window, and enter the following command: notepad.exe $PROFILE In the Notepad window that opens, add the following code and save the file: function backupMyFiles { robocopy C:\\Users\\yourUsername\\MobileStuff H:\\backups\\MobileStuff /s robocopy C:\\Users\\yourUsername\\Music H:\\backups\\Music /s } In this code: * backupMyFiles is the name of the function that you just created. * The two commands between the curly braces are the commands that will run whenever you run backupMyFiles in a PowerShell window. * Change yourUsername to whatever your actual username is. Once you save the file, close and reopen PowerShell, running the command backupMyFiles will automatically backup the folders mentioned in the file. You can add whichever commands you like to this function, or change the name of the function to whatever you prefer. This takes out the tediousness and repetition involved in running the same set of commands for every folder that you want to back up. Backups on macOS and Linux with Rsync Note : If you are using macOS, it is recommended to use the excellent, intuitive Time Machine utility to manage your backups and call it a day. However, if you are hardcore and wish to control every single aspect of your backups (or if you just prefer the command line), then continue reading. Rsync is a command-line utility for synchronizing files and folders between disks and (optionally) across the network. It comes preinstalled on macOS and most Linux distributions, so there is no need to install additional software. These instructions assume you have set up your folders according to the [sample folder structure]. If not, make sure to substitute accordingly. Again, pay attention to the case when working on the command line - document1.txt is NOT the same as Document1.txt . Pre-Setup Note for Linux users : Different Linux distributions and flavors have different ways to mount external drives and use different directories as mount points. Please refer to your distribution's documentation to know where external disks are mounted. Other than this detail, the rest of the documentation applies equally to macOS and Linux. Insert your external hard disk and open Finder. Make a note of what the drive is called. In my case, it is called Transcend : Navigate to the disk and create a folder called backups . This will be the folder in which you will back up your data. Your external disk is mounted in a folder called /Volumes . To locate it, open Terminal, type in the command ls /Volumes and press Enter/Return. You will see an output like the following: $ ls /Volumes Macintosh HD Preboot Transcend As noted earlier, my external disk is called Transcend . Therefore, we infer from this command that it is mounted under /Volumes/Transcend . Make a note of this path. Again, case matters. Use the mkdir (make directory) command to create a backups directory in the external drive: mkdir /Volumes/Transcend/backups Taking Backups Rsync commands are structured like: rsync [<options>] <source> <destination> As a sample backup plan, here is how to back up the MobileStuff directory: rsync -avu --progress --modify-window=1 ~/MobileStuff /Volumes/Transcend/backups Here is an explanation of what is going on in the above command: The -avu option has three parts: The a option tells Rsync to sync in \"archive\" mode. The v option increases verbosity and gives more details on what is going on during the transfer. u tells Rsync to skip any files that already exist on the destination during subsequent backups. However, if the file has been modified at the source, the destination file will be replaced with the newer version. --progress shows progress during transfer. ~ stands for your user's Home directory. /Users/<your username> on macOS, and /home/<your username> on Linux. /Volumes/Transcend/backups is the directory that the files will be synced to. The \"Transcend\" part will probably be different on your system. Substitute accordingly. --modify-window=1 is a special parameter that you need to pass if you are syncing from a macOS/Linux system to an external drive formatted in Microsoft's FAT filesystem family . Most flash drives are formatted in this filesystem by default. If you are certain that your external drive does not use this filesystem, you can omit this parameter. If you are not certain, leave it in. This will create a folder called MobileStuff in the destination folder /Volumes/Transcend/backups and sync it with the source folder. Any time you modify or add files to the source folder and rerun the above command, it will sync all the latest changes. Similarly, you can sync other directories: rsync -avu --progress --modify-window=1 ~/Music /Volumes/Transcend/backups Creating a Backup Script Instead of running the (rather lengthy) Rsync command(s) every time you want to do a backup, you can instead create a script to simplify the process. In a Terminal window, create a directory called bin : mkdir ~/bin In the newly created folder, using a text editor of your choice, create a file called backup.sh and add all the commands that you want to run. For example: rsync -avu --progress --modify-window=1 ~/MobileStuff /Volumes/Transcend/backups rsync -avu --progress --modify-window=1 ~/Music /Volumes/Transcend/backups rsync -avu --progress --modify-window=1 ~/Documents/SuperImportantDocs /Volumes/Transcend/backups Save the file and make it executable using the chmod command: chmod +x ~/bin/backup.sh Add the ~/bin directory to your PATH by editing your .bash_profile using your preferred text editor. For example: nano ~/.bash_profile Append the following line to this file and save it: export PATH=$PATH:$HOME/bin Close the terminal window and open a new one. Now, any time you run backup.sh in a Terminal, it will run all the commands you just saved, one after the other. Further Reading Syncthing Documentation Robocopy on Microsoft Docs Rsync Manual Page","title":"Automated, Distributed File Syncing and Backups Using Syncthing and Rsync"},{"location":"guides/sync_backup/#distributed-file-sync-with-syncthing","text":"","title":"Distributed File Sync with Syncthing"},{"location":"guides/sync_backup/#download-and-install-syncthing-for-your-os","text":"Android (Google play) , or alternatively, F-Droid Windows macOS Linux / BSD - use the version provided by your distribution (possibly old/outdated), or see the Packages and Bundlings document on the Syncthing website. Install Syncthing on two or more of the devices that you want to sync folders on.","title":"Download and install Syncthing for your OS:"},{"location":"guides/sync_backup/#example-setup-sharing-a-music-folder-between-an-android-phone-and-a-desktoplaptop-pc","text":"As a demonstration, you will learn to set up a folder called \"DesktopMusic\" in your user's Home directory on a desktop to sync with a folder called \"SyncedMusic\" on an Android device. Once you can set this up, adding more folders and/or devices will be relatively straightforward. On your desktop, create a folder called DesktopMusic in your user's Home directory. On your Android smartphone, using a file manager of your choice, create a folder called SyncedMusic . Run Syncthing on your desktop and open the Syncthing app on your smartphone. Make sure both the devices are connected to the same network. On your desktop, you will see a screen like the following: Click on the \" + Add Folder \" button on the left side of the screen. 1. In the dialog box that pops up, go to the \" Folder Path \" section and enter ~\\DesktopMusic if you are on Windows, or ~/DesktopMusic on Linux/macOS. The ~ character automatically translates to your current user's Home directory. Note for Linux/macOS users : Keep in mind that these systems are case-sensitive - document1.txt is NOT the same as Document1.txt. As in the screenshot, give this folder an appropriate \"Folder Label\" and click \"\u2705 Save \" On the bottom right of the main screen, you will see a button called \"**+Add Remote Device\". Click it. Make sure Syncthing is open on your smartphone. You will see a popup like the following: The highlighted link is the device ID of your smartphone. Click on it to add it. Optionally, give the device a name in the \" Device Name \" section. 1. In the same dialog box, click on the \" Sharing \" tab on the top and make sure the DesktopMusic folder that we created is selected. Click \"\u2705 Save \" once you are done. Soon, you will see a notification on your smartphone that says \"Device XYZ wants to connect\". Click on \" Accept \". After accepting, you will soon see another notification saying \"Device XYZ wants to share folder 'DesktopMusic'\". Click \" Accept \" again. You will see a screen similar to this: Tap on the part where it says \" Directory \", and navigate to the SyncedMusic folder that you created earlier in point 2 and select it. Once done, tap on the \u2705 tick button on the top right. If the DesktopMusic folder on your desktop has any files in it, they will sync with the smartphone. That is all you need to know for basic file syncing with Syncthing. You can follow the same procedure to add more devices and folders to your setup. Ideally, you will keep the Syncthing service running perpetually on your desktop and run it on your mobile devices as and when necessary (Syncthing can be a battery hog). For further reading and more advanced configurations, refer to the excellent Syncthing documentation . Of special interest are the concepts of Send-only folder (for devices where \"master copies\" are kept) and Receive-only folder .","title":"Example Setup: Sharing a Music Folder Between an Android Phone and a Desktop/Laptop PC"},{"location":"guides/sync_backup/#sample-folder-structure","text":"In a sample household with one desktop, one smartphone and one laptop, you can try to use a structure like this on your desktop: HOME/ \u251c Music # Synced in Send-only mode with smartphone and laptop \u2514 MobileStuff # Parent folder for files synced from your smartphone \u251c CameraPhotos # Synced in Receive-only mode with smartphone \u251c WhatsAppMedia # Your phone's `/storage/Whatsapp/Media` folder, # contains images,videos etc. shared on WhatsApp. \u2514 Similarly, any other folders in your phone that you'd like to sync. The advantage of a structure like this is that once your desktop or laptop has finished syncing with your smartphone, it is very easy to make backups of everything important, which we will learn in the next section.","title":"Sample Folder Structure"},{"location":"guides/sync_backup/#backups","text":"It is recommended to keep a copy of your important files on at least two external drives. One of them will be your daily backup drive - you insert it in your desktop or laptop once a day and make a backup. It will save your skin in case your computer's hard disk dies or if you accidentally delete your synced folders. The other drive is your weekly/monthly backup - you do the same thing as the first one on it once per week/month, and then store it in a different location than your first backup drive. This will save your skin in case your first backup drive either fails or your baby throws it across the room.","title":"Backups"},{"location":"guides/sync_backup/#backups-on-windows","text":"","title":"Backups on Windows"},{"location":"guides/sync_backup/#using-the-gui","text":"Backing up your personal files in Windows is relatively straightforward using the built-in Backup and Restore functionality. Insert your to-be backup drive in your computer, search for \" Backup Settings \" in the start menu, and use the GUI to configure which folders to back up, how often and to which drive. Do the same with your other backup drive, and you are done.","title":"Using the GUI"},{"location":"guides/sync_backup/#using-the-command-line-with-robocopy","text":"Another way to do backups on Windows if you need finer control of your backups and prefer using the command line is using the built-in Robocopy tool. While it is recommended to read the dedicated tutorial to get a good grasp of Robocopy, we will nevertheless see how to use it to back up your files to an external hard disk. For the purpose of this tutorial, we will assume you have a directory structure as mentioned in the Sample Folder Structure section above, and want to back up the Music and MobileStuff folders in your home directory. We are also assuming that your external drive is mounted as H:\\ . You will need to verify it on your system and change the drive letter accordingly. It is recommended to use a dedicated backup folder in your drive. In our case, we will use H:\\backups . Robocopy commands are structured like: robocopy <source> <destination> [<options>] To sync the MobileStuff folder, open a PowerShell window, and enter the following command: robocopy ~\\MobileStuff H:\\backups\\MobileStuff /s Here is an explanation of what is going on: ~ is shortcut for your user's Home directory - C:\\Users\\yourUsername by default. Therefore, ~\\MobileStuff automatically translates to C:\\Users\\yourUsername\\MobileStuff The /s option tells Robocopy to copy s ubdirectories when available. Similarly, we can do the same for Music or any other folder: robocopy ~\\Music H:\\backups\\Music /s","title":"Using the Command Line with Robocopy"},{"location":"guides/sync_backup/#simplifying-the-process","text":"If you have several folders that you wish to back up regularly, entering the above command for every folder will get tedious. To solve this problem, you can write a PowerShell function . Open a new PowerShell window, and enter the following command: notepad.exe $PROFILE In the Notepad window that opens, add the following code and save the file: function backupMyFiles { robocopy C:\\Users\\yourUsername\\MobileStuff H:\\backups\\MobileStuff /s robocopy C:\\Users\\yourUsername\\Music H:\\backups\\Music /s } In this code: * backupMyFiles is the name of the function that you just created. * The two commands between the curly braces are the commands that will run whenever you run backupMyFiles in a PowerShell window. * Change yourUsername to whatever your actual username is. Once you save the file, close and reopen PowerShell, running the command backupMyFiles will automatically backup the folders mentioned in the file. You can add whichever commands you like to this function, or change the name of the function to whatever you prefer. This takes out the tediousness and repetition involved in running the same set of commands for every folder that you want to back up.","title":"Simplifying the Process"},{"location":"guides/sync_backup/#backups-on-macos-and-linux-with-rsync","text":"Note : If you are using macOS, it is recommended to use the excellent, intuitive Time Machine utility to manage your backups and call it a day. However, if you are hardcore and wish to control every single aspect of your backups (or if you just prefer the command line), then continue reading. Rsync is a command-line utility for synchronizing files and folders between disks and (optionally) across the network. It comes preinstalled on macOS and most Linux distributions, so there is no need to install additional software. These instructions assume you have set up your folders according to the [sample folder structure]. If not, make sure to substitute accordingly. Again, pay attention to the case when working on the command line - document1.txt is NOT the same as Document1.txt .","title":"Backups on macOS and Linux with Rsync"},{"location":"guides/sync_backup/#pre-setup","text":"Note for Linux users : Different Linux distributions and flavors have different ways to mount external drives and use different directories as mount points. Please refer to your distribution's documentation to know where external disks are mounted. Other than this detail, the rest of the documentation applies equally to macOS and Linux. Insert your external hard disk and open Finder. Make a note of what the drive is called. In my case, it is called Transcend : Navigate to the disk and create a folder called backups . This will be the folder in which you will back up your data. Your external disk is mounted in a folder called /Volumes . To locate it, open Terminal, type in the command ls /Volumes and press Enter/Return. You will see an output like the following: $ ls /Volumes Macintosh HD Preboot Transcend As noted earlier, my external disk is called Transcend . Therefore, we infer from this command that it is mounted under /Volumes/Transcend . Make a note of this path. Again, case matters. Use the mkdir (make directory) command to create a backups directory in the external drive: mkdir /Volumes/Transcend/backups","title":"Pre-Setup"},{"location":"guides/sync_backup/#taking-backups","text":"Rsync commands are structured like: rsync [<options>] <source> <destination> As a sample backup plan, here is how to back up the MobileStuff directory: rsync -avu --progress --modify-window=1 ~/MobileStuff /Volumes/Transcend/backups Here is an explanation of what is going on in the above command: The -avu option has three parts: The a option tells Rsync to sync in \"archive\" mode. The v option increases verbosity and gives more details on what is going on during the transfer. u tells Rsync to skip any files that already exist on the destination during subsequent backups. However, if the file has been modified at the source, the destination file will be replaced with the newer version. --progress shows progress during transfer. ~ stands for your user's Home directory. /Users/<your username> on macOS, and /home/<your username> on Linux. /Volumes/Transcend/backups is the directory that the files will be synced to. The \"Transcend\" part will probably be different on your system. Substitute accordingly. --modify-window=1 is a special parameter that you need to pass if you are syncing from a macOS/Linux system to an external drive formatted in Microsoft's FAT filesystem family . Most flash drives are formatted in this filesystem by default. If you are certain that your external drive does not use this filesystem, you can omit this parameter. If you are not certain, leave it in. This will create a folder called MobileStuff in the destination folder /Volumes/Transcend/backups and sync it with the source folder. Any time you modify or add files to the source folder and rerun the above command, it will sync all the latest changes. Similarly, you can sync other directories: rsync -avu --progress --modify-window=1 ~/Music /Volumes/Transcend/backups","title":"Taking Backups"},{"location":"guides/sync_backup/#creating-a-backup-script","text":"Instead of running the (rather lengthy) Rsync command(s) every time you want to do a backup, you can instead create a script to simplify the process. In a Terminal window, create a directory called bin : mkdir ~/bin In the newly created folder, using a text editor of your choice, create a file called backup.sh and add all the commands that you want to run. For example: rsync -avu --progress --modify-window=1 ~/MobileStuff /Volumes/Transcend/backups rsync -avu --progress --modify-window=1 ~/Music /Volumes/Transcend/backups rsync -avu --progress --modify-window=1 ~/Documents/SuperImportantDocs /Volumes/Transcend/backups Save the file and make it executable using the chmod command: chmod +x ~/bin/backup.sh Add the ~/bin directory to your PATH by editing your .bash_profile using your preferred text editor. For example: nano ~/.bash_profile Append the following line to this file and save it: export PATH=$PATH:$HOME/bin Close the terminal window and open a new one. Now, any time you run backup.sh in a Terminal, it will run all the commands you just saved, one after the other.","title":"Creating a Backup Script"},{"location":"guides/sync_backup/#further-reading","text":"Syncthing Documentation Robocopy on Microsoft Docs Rsync Manual Page","title":"Further Reading"},{"location":"guides/torrentbox/","text":"In this article, you will learn how to make a Torrent Box - a computer dedicated to downloading and seeding torrent files. Ideally, this will be a low-powered computer that stays on most or all of the time, such as an Intel NUC or a Raspberry Pi. However, you can use practically any computer for this purpose. By the end of this guide, you will have a torrent box that you can control (add/remove torrents, limit bandwidth etc) and copy files or stream media from any device on your local network. For the file sharing and streaming to work, it is recommended to follow and set up file-sharing using the Simple File / Media Server guide beforehand. Table of Contents: Prerequisites and Assumptions Installing Transmission Daemon Creating the Downloads Folder Configuring Transmission Optional: Watching a Directory for Torrents Final Steps Accessing the Web Interface Mobile and Desktop Apps Final Thoughts and Further Reading Prerequisites and Assumptions A computer running a recent version of Debian, Raspbian or Ubuntu. A way to connect said computer to the local network and the internet (Wifi/Ethernet). Plenty of disk space to store your downloaded files in. This guide assumes that you have read and set up file sharing on this computer as described in the Simple File / Media Server guide . If you don't, the torrenting part will still work, but you will not be able to access the downloaded files over the network. You can skip that guide if you have another way to transfer the downloaded files to your other devices. For the sake of consistency, it is assumed that this is being set up on a Raspberry Pi running Raspbian, with the username pi . Installing Transmission Daemon Transmission is a lightweight, multi-platform torrent client. It can be used like a regular torrent client with a GUI like Deluge or qBittorrent. However, for a torrent box that you can control remotely, you will need the Transmission daemon , which is a service that runs in the background and can be controlled remotely. To install Tramission daemon, run the following commands in a Terminal window: sudo apt update sudo apt install transmission-daemon Before we configure anything, it is important to know that whenever you make any changes to the Transmission configuration file, you have to stop the Transmission daemon beforehand , otherwise Transmission will lose the changes you made and overwrite the file with the previous configuration. To prevent this from happening, stop the daemon before configuring anything: sudo systemctl stop transmission-daemon Creating the Downloads Folder Before we begin the configuration, we will create a folder for Transmission to save downloaded files in. If you have been following the Simple File / Media Server guide , you will already have a folder called /share that is owned by your user. Now create a folder called /share/torrents owned by the (automatically created) debian-transmission user and group. Despite what the name suggests, this user is created even if you are using Ubuntu. sudo mkdir -p /share/torrents sudo chown debian-transmission:debian-transmission /share/torrents Configuring Transmission The main configuration file is located in /etc/transmission-daemon/settings.json . As mentioned before, it is necessary to stop the Transmission daemon before you edit this file. Have a look at the configuration file by opening it with your preferred text editor. Most of the configuration parameters are self explanatory: sudo nano /etc/transmission-daemon/settings.json If you do not yet know how to use the nano text editor, please refer to this Gentoo Wiki article . Here are the parameters that you should change in the configuration file. Just look for them (all the parameters are ordered alphabetically by default) and make modifications as necessary. Please pay attention to the quotes and commas. They are mandatory and should be copied as-is: \"download-dir\": \"/share/torrents\", \"rpc-username\": \"transmission\", \"rpc-password\": \"ChooseAStrongPassword\", \"rpc-whitelist\": \"127.0.0.1,192.168.*.*\", \"umask\": 0, Here is what these parameters mean: download-dir refers to the directory that the files should be downloaded in. rpc-username is the username that will be used to login to the Transmission web interface. rpc-password is the password that will be used for above username. Choose a strong password in this field. It will be rewritten to a hashed version after you restart Transmission daemon for security reasons. rpc-whitelist is a list of IP addressed that can access the Transmission web interface. In this case, it is 127.0.0.1 , i.e., the machine that the daemon is running on, 192.168.*.* , which would include the devices connected to your local network. umask is set to 0 , which means that the downloaded files will be readable and writable by users other than debian-transmission , the Transmission daemon's default user. Optional: Watching a Directory for Torrents If you wish to have torrents automatically start downloading by adding *.torrent files to a certain directory, you can use the watch-dir family of directives. Modify the values in the settings.json file to the following: \"watch-dir-enabled\": 1, \"watch-dir\": \"/share/torrents/watch\", You will also need to create the directory and give your user appropriate permissions: sudo mkdir /share/torrents/watch sudo chown pi:pi /share/torrents/watch Note : This guide is written assuming Raspbian OS, and you should replace pi:pi with your actual username and group, for example, mark:mark . Final Steps After you have configured Transmission to your liking, it is time to restart the daemon and enable it so that it starts at every boot: sudo systemctl start transmission-daemon sudo systemctl enable transmission-daemon Accessing the Web Interface To access the web interface, you first need to know the local IP address of the machine that Transmission daemon is running on. To do this, run the hostname command on the machine, like so: hostname -I You will get an address like 192.168.1.15 in the output. This is the local IP address of your torrent box. Note it down. The web interface runs on port 9091 by default. To access it, open a web browser, and enter the IP address of your torrent box, followed by :9091 . For example, if the IP address is 192.168.1.15 , then enter 192.168.1.15:9091 in the address bar and hit Enter . You will see a screen like the following: While not the prettiest of interfaces, this screen is functional and lets you add torrents: Change settings (by clicking the wrench icon in the bottom left) such as the default download path, download/upload speeds: Once you have added torrents, you can also view and change per-torrent settings such as download speed, or choosing which files to download by selecting a torrent and clicking on the large, blue \"i\" button on the top right: Mobile and Desktop Apps If you would rather access your torrent box using a native app rather than a web browser, here is a list of apps. In most cases, you only need to provide the server's local IP address and the port that Transmission daemon is running on (9091 by default). Desktop - Transmission Remote GUI (Windows, Linux, macOS) Android: Tremotesf F-Droid , Play Store Transmission Remote Transdroid Final Thoughts and Further Reading This is all you need to know for basic usage of the Transmission daemon and web interface. The configuration file and the web interface are relatively simple to understand and manipulate. Here is a list of helpful web pages to help you learn more about this setup: Transmission Wiki on GitHub Configuration File Reference on Transmission Wiki Ubuntu Wiki Article (slightly outdated, but still contains useful information) Simple File / Media Server Guide - The guide that this tutorial is based on. Contains useful information on how to share files and stream media across your local network. Distributed File Syncing and Backups Guide - A useful resource if you want to automatically sync your downloaded files to your devices rather than accessing them through the server. Tip: If you are going to use Syncthing to sync the downloaded files, change \"incomplete-dir-enabled\": false, to \"incomplete-dir-enabled\": true, and choose a folder outside of /share in the \"incomplete-dir\": parameter in settings.json . This is to ensure that Syncthing only syncs the completed files in /share/torrents rather than inefficiently transferring incomplete torrent downloads.","title":"Simple Torrent Box Using Transmission-daemon"},{"location":"guides/torrentbox/#prerequisites-and-assumptions","text":"A computer running a recent version of Debian, Raspbian or Ubuntu. A way to connect said computer to the local network and the internet (Wifi/Ethernet). Plenty of disk space to store your downloaded files in. This guide assumes that you have read and set up file sharing on this computer as described in the Simple File / Media Server guide . If you don't, the torrenting part will still work, but you will not be able to access the downloaded files over the network. You can skip that guide if you have another way to transfer the downloaded files to your other devices. For the sake of consistency, it is assumed that this is being set up on a Raspberry Pi running Raspbian, with the username pi .","title":"Prerequisites and Assumptions"},{"location":"guides/torrentbox/#installing-transmission-daemon","text":"Transmission is a lightweight, multi-platform torrent client. It can be used like a regular torrent client with a GUI like Deluge or qBittorrent. However, for a torrent box that you can control remotely, you will need the Transmission daemon , which is a service that runs in the background and can be controlled remotely. To install Tramission daemon, run the following commands in a Terminal window: sudo apt update sudo apt install transmission-daemon Before we configure anything, it is important to know that whenever you make any changes to the Transmission configuration file, you have to stop the Transmission daemon beforehand , otherwise Transmission will lose the changes you made and overwrite the file with the previous configuration. To prevent this from happening, stop the daemon before configuring anything: sudo systemctl stop transmission-daemon","title":"Installing Transmission Daemon"},{"location":"guides/torrentbox/#creating-the-downloads-folder","text":"Before we begin the configuration, we will create a folder for Transmission to save downloaded files in. If you have been following the Simple File / Media Server guide , you will already have a folder called /share that is owned by your user. Now create a folder called /share/torrents owned by the (automatically created) debian-transmission user and group. Despite what the name suggests, this user is created even if you are using Ubuntu. sudo mkdir -p /share/torrents sudo chown debian-transmission:debian-transmission /share/torrents","title":"Creating the Downloads Folder"},{"location":"guides/torrentbox/#configuring-transmission","text":"The main configuration file is located in /etc/transmission-daemon/settings.json . As mentioned before, it is necessary to stop the Transmission daemon before you edit this file. Have a look at the configuration file by opening it with your preferred text editor. Most of the configuration parameters are self explanatory: sudo nano /etc/transmission-daemon/settings.json If you do not yet know how to use the nano text editor, please refer to this Gentoo Wiki article . Here are the parameters that you should change in the configuration file. Just look for them (all the parameters are ordered alphabetically by default) and make modifications as necessary. Please pay attention to the quotes and commas. They are mandatory and should be copied as-is: \"download-dir\": \"/share/torrents\", \"rpc-username\": \"transmission\", \"rpc-password\": \"ChooseAStrongPassword\", \"rpc-whitelist\": \"127.0.0.1,192.168.*.*\", \"umask\": 0, Here is what these parameters mean: download-dir refers to the directory that the files should be downloaded in. rpc-username is the username that will be used to login to the Transmission web interface. rpc-password is the password that will be used for above username. Choose a strong password in this field. It will be rewritten to a hashed version after you restart Transmission daemon for security reasons. rpc-whitelist is a list of IP addressed that can access the Transmission web interface. In this case, it is 127.0.0.1 , i.e., the machine that the daemon is running on, 192.168.*.* , which would include the devices connected to your local network. umask is set to 0 , which means that the downloaded files will be readable and writable by users other than debian-transmission , the Transmission daemon's default user.","title":"Configuring Transmission"},{"location":"guides/torrentbox/#optional-watching-a-directory-for-torrents","text":"If you wish to have torrents automatically start downloading by adding *.torrent files to a certain directory, you can use the watch-dir family of directives. Modify the values in the settings.json file to the following: \"watch-dir-enabled\": 1, \"watch-dir\": \"/share/torrents/watch\", You will also need to create the directory and give your user appropriate permissions: sudo mkdir /share/torrents/watch sudo chown pi:pi /share/torrents/watch Note : This guide is written assuming Raspbian OS, and you should replace pi:pi with your actual username and group, for example, mark:mark .","title":"Optional:  Watching a Directory for Torrents"},{"location":"guides/torrentbox/#final-steps","text":"After you have configured Transmission to your liking, it is time to restart the daemon and enable it so that it starts at every boot: sudo systemctl start transmission-daemon sudo systemctl enable transmission-daemon","title":"Final Steps"},{"location":"guides/torrentbox/#accessing-the-web-interface","text":"To access the web interface, you first need to know the local IP address of the machine that Transmission daemon is running on. To do this, run the hostname command on the machine, like so: hostname -I You will get an address like 192.168.1.15 in the output. This is the local IP address of your torrent box. Note it down. The web interface runs on port 9091 by default. To access it, open a web browser, and enter the IP address of your torrent box, followed by :9091 . For example, if the IP address is 192.168.1.15 , then enter 192.168.1.15:9091 in the address bar and hit Enter . You will see a screen like the following: While not the prettiest of interfaces, this screen is functional and lets you add torrents: Change settings (by clicking the wrench icon in the bottom left) such as the default download path, download/upload speeds: Once you have added torrents, you can also view and change per-torrent settings such as download speed, or choosing which files to download by selecting a torrent and clicking on the large, blue \"i\" button on the top right:","title":"Accessing the Web Interface"},{"location":"guides/torrentbox/#mobile-and-desktop-apps","text":"If you would rather access your torrent box using a native app rather than a web browser, here is a list of apps. In most cases, you only need to provide the server's local IP address and the port that Transmission daemon is running on (9091 by default). Desktop - Transmission Remote GUI (Windows, Linux, macOS) Android: Tremotesf F-Droid , Play Store Transmission Remote Transdroid","title":"Mobile and Desktop Apps"},{"location":"guides/torrentbox/#final-thoughts-and-further-reading","text":"This is all you need to know for basic usage of the Transmission daemon and web interface. The configuration file and the web interface are relatively simple to understand and manipulate. Here is a list of helpful web pages to help you learn more about this setup: Transmission Wiki on GitHub Configuration File Reference on Transmission Wiki Ubuntu Wiki Article (slightly outdated, but still contains useful information) Simple File / Media Server Guide - The guide that this tutorial is based on. Contains useful information on how to share files and stream media across your local network. Distributed File Syncing and Backups Guide - A useful resource if you want to automatically sync your downloaded files to your devices rather than accessing them through the server. Tip: If you are going to use Syncthing to sync the downloaded files, change \"incomplete-dir-enabled\": false, to \"incomplete-dir-enabled\": true, and choose a folder outside of /share in the \"incomplete-dir\": parameter in settings.json . This is to ensure that Syncthing only syncs the completed files in /share/torrents rather than inefficiently transferring incomplete torrent downloads.","title":"Final Thoughts and Further Reading"}]}